{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "from pydicom import dcmread\n",
    "import cv2 \n",
    "import numpy as np\n",
    "from imageio import imread\n",
    "\n",
    "f = open(\"./test_name_txt\",'w')\n",
    "path = \"./Train_Sets/MR/\"\n",
    "files = os.listdir(path)\n",
    "files.sort()\n",
    "save_dcm_path = \"./dcm_data/\"\n",
    "save_label_path = \"./label_data/\"\n",
    "\n",
    "images = np.zeros((623,256,256)).astype('float')\n",
    "labels = np.zeros((623,256,256)).astype('float')\n",
    "i = 0\n",
    "ik = 0\n",
    "for file in files:\n",
    "    #print(path+file)\n",
    "    if os.path.isdir(path+file):       \n",
    "\n",
    "        dcm_image = \"/T2SPIR/DICOM_anon\"\n",
    "        label = \"/T2SPIR/ground\"\n",
    "        image_path = path+file+dcm_image\n",
    "        label_path = path+file+label\n",
    "        image_list = os.listdir(image_path)\n",
    "        label_list = os.listdir(label_path)\n",
    "        image_list.sort()\n",
    "        label_list.sort()\n",
    "        #print(image_list)\n",
    "        #print(label_list)\n",
    "        \n",
    "        \n",
    "        for fi in label_list:\n",
    "            f_path = os.path.join(label_path,fi)\n",
    "            img = imread(f_path) \n",
    "            \n",
    "#             title, ext = os.path.splitext(f_path)\n",
    "#             #print(ext)\n",
    "#             final_filepath = os.path.join(save_label_path, fi + '_half' + ext)\n",
    "#             img.save(final_filepath)\n",
    "            if img.size > 65536:\n",
    "                crop_image = np.zeros((256,256)).astype('float')\n",
    "                crop_image = img[31:287,31:287]\n",
    "                img = crop_image\n",
    "            labels[ik,:,:] = img[:,:]\n",
    "            #print(ik)\n",
    "            ik = ik+1\n",
    "    \n",
    "\n",
    "           \n",
    "        for fil in image_list:\n",
    "            f_path = os.path.join(image_path,fil)\n",
    "            ds = dcmread(f_path)\n",
    "            pixel_array_numpy = ds.pixel_array\n",
    "            image = pixel_array_numpy\n",
    "            #image_format = '.jpg' # or '.png'\n",
    "            #image_path = image_path.replace('.dcm', image_format)\n",
    "            #final_path = os.path.join(save_dcm_path, fil +  image_format)\n",
    "            #cv2.imwrite(final_path, pixel_array_numpy)\n",
    "            if image.size > 65536:\n",
    "                crop_image = np.zeros((256,256)).astype('float')\n",
    "                crop_image = image[31:287,31:287]\n",
    "                image = crop_image\n",
    "            images[i,:,:] = image[:,:]\n",
    "            #print(i)\n",
    "            i = i+1\n",
    "\n",
    "       \n",
    "    \n",
    "#a = np.asarray([ [1,2,3], [4,5,6], [7,8,9] ])\n",
    "#np.save(\"label_data.npy\", labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "img = labels[600,:,:]\n",
    "imgplot = plt.imshow(img)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(623, 256, 256)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.save(\"label_data.npy\", labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.save(\"label_data.npy\", labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
